# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/001_core.ipynb (unless otherwise specified).

__all__ = ['TSTensor', 'ToTSTensor']

# Cell
from fastcore.all import *
from fastai2.torch_imports import *
from fastai2.torch_core import *
from fastai2.data.all import *

# Cell
from .imports import *
from .utils import *

# Cell
class TSTensor(TensorBase):

    @classmethod
    def create(cls, o):
        return cls(To2DPlusTensor(o)) # creates a TSTensor with at least 2 dimensions of type float

    @property
    def vars(self): return self.shape[-2]

    @property
    def len(self): return self.shape[-1]

    def __getitem__(self, idx):
        res = super().__getitem__(idx)
        return retain_type(res, self)

    def __repr__(self):
        return f'TSTensor(size:{list(self.size())})'

    def show(self, ax=None, ctx=None, title=None, **kwargs):
        ax = ifnone(ax,ctx)
        if ax is None: fig, ax = plt.subplots(**kwargs)
        ax.plot(self.T)
        ax.axis(xmin=0, xmax=self.shape[-1] - 1)
        ax.set_title(title, weight='bold')
        plt.tight_layout()
        return ax

@Transform
def ToTSTensor(o:np.ndarray):
    """ np.ndarray to tensor of dtype torch.float32"""
    return TSTensor.create(o)